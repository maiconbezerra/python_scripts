import rsa
import secrets

def rsa_genkey(keysize=1024,pubkey_filename='pub.pem', privkey_filename='priv.pem'):

    """
    Using asymmetrical cryptography algorithm, creates a key pair.
    The public key will be used to encrypt message and the private key to decrypt it

    Use use fgt_encrypt_msg.py to generate your key pair

    :param keysize - Inform crypto key size (2048 recommended)
    :param pubkey_filename - Inform public key file name in .pem format
    :param privkey_filename - Inform private key file name in .pem format

    -> Obs. The key files will be generated in root folder
    """

    # Generate public and private keys
    publicKey, privateKey = rsa.newkeys(keysize)

    #  Export public key to .pem file
    with open(pubkey_filename, 'wb') as export:
        export.write(publicKey.save_pkcs1('PEM'))

    #  Export private key to .pem file
    with open(privkey_filename, 'wb') as export:
        export.write(privateKey.save_pkcs1('PEM'))


def rsa_encrypt(msg, pubkey_file, enc_msg_file='encmsg'):

    """
    Used to encrypt message using public key defined by rsa_genkey function

    Use use fgt_encrypt_msg.py to encrypt a message

    :param msg - Inform message to be encrypted
    :param pubkey_file - Inform public key file used to encrypt message
    :param enc_msg_file - Inform name of file generated after encryption

        -> Obs. The file will be generated in root folder
    """

    #  Read Public Key
    with open(pubkey_file, 'rb') as importkey:
        pubkey = rsa.PublicKey.load_pkcs1(importkey.read())

    #  Encrypting message
    encrypted_msg = rsa.encrypt(msg.encode(), pubkey)

    #  Export password to external file
    with open(enc_msg_file, 'wb') as exportpass:
        exportpass.write(encrypted_msg)



def rsa_decrypt(enc_file, privkey_file):

    """
    Used to decrypt message based on file generated by rsa_encrypt function.
    The private key defined by rsa_genkey need to be used

    :param enc_file - Inform file encrypted message (by default uses the name encmsg in root folder)
    :param privkey_file - Inform private key to decrypt file message.
    After that return as a string to a variable in fgt_session.py
    """

    #  Read Private Key
    with open(privkey_file, 'rb') as importkey:
        privkey = rsa.PrivateKey.load_pkcs1(importkey.read())

    #  Decrypt message
    decrypt_msg = rsa.decrypt(enc_file, privkey).decode()

    #  Return decrypted message
    return decrypt_msg


def password_generator(length):
    letters = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'
    digits = '1234567890'
    special_chars = '-!@#$&*_'

    password = ''
    pwd_len = length

    count = 0
    while count < pwd_len:

        if count < pwd_len:
            password += secrets.choice(letters)
            count += 1
        if count < pwd_len:
            password += secrets.choice(digits)
            count += 1
        if count < pwd_len:
            password += secrets.choice(special_chars)
            count += 1

    return password